
import json
import websocket
import threading
from config import TRADE_AMOUNT_USD, SYMBOL
from telegram_utils import send_telegram_message

position = None
entry_price = 0

def on_message(ws, message):
    global position, entry_price
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket")
    
    try:
        data = json.loads(message)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON")
        return

    if "data" not in data:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è 'data'")
        return

    bids = data['data']['b']
    asks = data['data']['a']

    best_bid = float(bids[0][0])
    best_ask = float(asks[0][0])
    spread = best_ask - best_bid

    print(f"üìä best_bid: {best_bid}, best_ask: {best_ask}, spread: {spread}")

    if position is None and spread > 0.2:
        position = "long"
        entry_price = best_ask
        print(f"üü¢ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: BUY @ {entry_price}")
        send_telegram_message(f"üü¢ BUY @ {entry_price:.2f}")

    elif position == "long":
        exit_price = best_bid
        profit = (exit_price - entry_price) * (TRADE_AMOUNT_USD / entry_price)

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞: exit @ {exit_price}, profit = {profit:.2f}")

        if abs(profit) >= 0.1:
            print(f"üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: SELL @ {exit_price} ‚Äî PnL: {profit:.2f}")
            send_telegram_message(f"üî¥ SELL @ {exit_price:.2f}\nüí∞ PnL: {profit:.2f} USDT")
            position = None

def on_open(ws):
    print("üöÄ WebSocket –æ—Ç–∫—Ä—ã—Ç. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
    ws.send(json.dumps({
        "op": "subscribe",
        "args": [f"orderbook.1.{SYMBOL}"]
    }))
    send_telegram_message("ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å—Ç–∞–∫–∞–Ω—É –∏ –∑–∞–ø—É—â–µ–Ω.")

def run_bot():
    print("üß† –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
    ws = websocket.WebSocketApp(
        "wss://stream.bybit.com/v5/public/spot",
        on_open=on_open,
        on_message=on_message
    )
    ws.run_forever()

if __name__ == "__main__":
    print("üîÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
    thread = threading.Thread(target=run_bot)
    thread.start()
