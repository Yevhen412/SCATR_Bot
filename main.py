import time
import threading
import json
import websocket

from config import SYMBOLS, TRADE_AMOUNT_USD, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, COMMISSION
from telegram_utils import send_telegram_message

entry_prices = {}
trades = {}

def on_message(ws, message):
    print("üëÄ –í–æ—à—ë–ª –≤ on_message")
    print("üîπ –°–æ–æ–±—â–µ–Ω–∏–µ:", message)

    data = json.loads(message)

    try:
        data = json.loads(message)
        if "data" in data and isinstance(data["data"], list):
            update = data["data"][0]
            bid = float(update["b"][0][0])
            ask = float(update["a"][0][0])
            spread = ask - bid
            gross_profit = spread
            net_profit = gross_profit - COMMISSION

            print(f"BID: {bid}, ASK: {ask}, SPREAD: {spread:.4f}")
            print(f"Gross: {gross_profit:.4f}, Net: {net_profit:.4f}")

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏—è
            if entry_price and (bid < entry_price * 0.985):
                send_telegram_message("üîª –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1.5% ‚Äî —Å–¥–µ–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞.")
                return

            # –°—Ç–æ–ø-–ª–æ—Å—Å
            if entry_price and (bid < entry_price * 0.993):
                send_telegram_message(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: BID = {bid}")
                entry_price = None
                return

            if net_profit > 0.01:
                entry_price = ask
                trade_time = time.strftime('%H:%M:%S')
                trades.append((trade_time, ask))
                send_telegram_message(f"üü¢ BUY @ {ask:.2f}")

    except Exception as e:
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    try:
        data = json.loads(message)
        if "data" in data and isinstance(data["data"], list):
            update = data["data"][0]
            bid = float(update["b"])
            ask = float(update["a"])
            spread = ask - bid
            gross_profit = spread
            net_profit = gross_profit - COMMISSION

            print(f"BID: {bid}, ASK: {ask}, SPREAD: {spread:.4f}")
            print(f"Gross: {gross_profit:.4f}, Net: {net_profit:.4f}")

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏—è
            if entry_price and (bid < entry_price * 0.985):
                send_telegram_message("üîª –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1.5% ‚Äî —Å–¥–µ–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞.")
                return

            # –°—Ç–æ–ø-–ª–æ—Å—Å
            if entry_price and (bid < entry_price * 0.993):
                send_telegram_message(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: BID = {bid}")
                entry_price = None
                return

            if net_profit > 0.01:
                entry_price = ask
                trade_time = time.strftime('%H:%M:%S')
                trades.append((trade_time, ask))
                send_telegram_message(f"üü¢ BUY @ {ask:.2f}")

    except Exception as e:
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    try:
        data = json.loads(message)
        if "data" in data and isinstance(data["data"], list):
            update = data["data"][0]
            bid = float(update["b"])
            ask = float(update["a"])
            spread = ask - bid
            gross_profit = spread
            net_profit = gross_profit - COMMISSION

            print(f"BID: {bid}, ASK: {ask}, SPREAD: {spread:.4f}")
            print(f"Gross: {gross_profit:.4f}, Net: {net_profit:.4f}")

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏—è
            if entry_price and (bid < entry_price * 0.985):
                send_telegram_message("üîª –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1.5% ‚Äî —Å–¥–µ–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞.")
                return

            # –°—Ç–æ–ø-–ª–æ—Å—Å
            if entry_price and (bid < entry_price * 0.993):
                send_telegram_message(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: BID = {bid}")
                entry_price = None
                return

            if net_profit > 0.01:
                entry_price = ask
                trade_time = time.strftime('%H:%M:%S')
                trades.append((trade_time, ask))
                send_telegram_message(f"üü¢ BUY @ {ask:.2f}")

    except Exception as e:
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def on_open(ws):
    print("üß© –í–Ω—É—Ç—Ä–∏ on_open")
    args = [f"orderbook.1.{symbol}" for symbol in SYMBOLS]
    ws.send(json.dumps({
        "op": "subscribe",
        "args": args
    }))
    for symbol in SYMBOLS:
        send_telegram_message(f"ü§ñ [{symbol}] –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å—Ç–∞–∫–∞–Ω—É –∏ –∑–∞–ø—É—â–µ–Ω.")

def heartbeat():
    while True:
        time.sleep(600)
        print("üíì Heartbeat: –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        send_telegram_message("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

def summary():
    while True:
        time.sleep(3600)
        print("üìù –°–≤–æ–¥–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è")
        for symbol, symbol_trades in trades.items():
            if symbol_trades:
                msg = f"üìä [{symbol}] –°–≤–æ–¥–∫–∞ –∑–∞ —á–∞—Å:\n"
                for t, p in symbol_trades:
                    msg += f"{t}: BUY @ {p:.2f}\n"
                send_telegram_message(msg)
        trades.clear()

def run_bot():
    print("‚öôÔ∏è run_bot() –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    threading.Thread(target=heartbeat, daemon=True).start()
    threading.Thread(target=summary, daemon=True).start()

    while True:
        try:
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
            ws = websocket.WebSocketApp(
                "wss://stream.bybit.com/v5/public/spot",
                on_open=on_open,
                on_message=on_message
            )
            print("üü¢ WebSocket —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º run_forever()")
            ws.run_forever()
        except Exception as e:
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            time.sleep(10)

if __name__ == "__main__":
    print("üöÄ main.py —Å—Ç–∞—Ä—Ç—É–µ—Ç")
    run_bot()
